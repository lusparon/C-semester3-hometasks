#ifndef HW2_H
#define HW2_H
#include <vector>
#include <string>
//единицы длины 
enum MyLength { decimeter =1 , kilometer , meter, millimeter, centimeter};

//Дан номер единицы длины (целое число в диапазоне 1–5) и длина отрезка в этих единицах (вещественное число). Найти длину отрезка в метрах.
double LineLength(MyLength, double);

//Дан целочисленный вектор A размера N (> 0). Заполнить его степенями двойки от первой до N-й: 2, 4, 8, 16, 
void DegreeOfTwoVector(std::vector<int>&);

//Дан целочисленный вектор A размера N, содержащий хотя бы одно чётное число. Найти первое и последнее чётное число в данном векторе.
void FirstAndLastEven(std::vector<int>, int&, int&);

//Дан вектор A размера N (N — нечетное число). Вывести его элементы с нечётными номерами в порядке убывания номеров
void ReverseOddElems(std::vector<int>);

//Дан целочисленный вектор размера N и целые числа K и L (0 ≤ K ≤ L < N). Найти среднее арифметическое элементов вектора с номерами от K до L включительно.
double AverageKtoL(std::vector<int>, int, int);

//Даны два вещественных вектора A и B, каждый размера N. Переписать в вектор B вначале все элементы вектора A с чётными номерами, а затем — с нечётными:
void FromAtoB(std::vector<double>, std::vector<double>&);

//Дан вектор размера N (N — чётное число). Поменять местами первую и вторую половины вектора.
void ExpandVector(std::vector<int>&);

//Дан вектор размера N и целое число K (0 ≤ K < N). Удалить из вектора элемент с порядковым номером K, сдвинув все следующие за ним элементы на одну позицию влево и уменьшив размер вектора на единицу.
void DeleteKElem(std::vector<int>&, int);

//Дана строка, изображающая запись целого положительного числа в системе счисления с основанием b (0 < b ≤ 10). Вернуть соответствующее целое число
int StringToInt(std::string, int);

//Структура для слова
struct word
{
	std::string s;
	int pos;
	int length;
};

//Дана строка, состоящая из английских слов, набранных заглавными буквами и разделенных пробелами(одним или несколькими).
//Сформировать вектор структур со следующей информацией по каждому слову в строке : позиция начала слова, длина слова.
std::vector<word> VecOfStruct(std::string);

//Фунция печати вектора из прошлого номера
void print_vector_struct(const std::vector<word> );

//алгоритм сортировки вектора из предыдущего упражнения по убыванию длины слова
void DecrSort(std::vector<word>&);



#endif HW2_H
