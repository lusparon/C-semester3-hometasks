#ifndef test1_h
#define test1_h
#include <vector>
#include <string>
using namespace std;
//Дан целочисленный вектор и целое число k. Построить новый вектор, содержащий только чётные элементы исходного вектора, превосходящие k.
std::vector<int> MoreThenK(std::vector<int> v, int k);

//Используя алгоритм «Решето Эратосфена», необходимо заполнить вектор простыми числами (т.е. делящимися только на себя и на единицу) на интервале [0,N].
void Eratosthenes(std::vector<int>& v, int n);

//Вычислить номер первого числа в наборе, являющегося степенью числа K. Если такого числа нет, то вернуть ноль.
int FirstPowK(int k, std::vector<int> v);

//Дано N и вектор действительных чисел размера N. Построить новый вектор, элементами которого являются x1*y1,...xs*ys, где x1,...xp - отрицательные элементы исходного вектора,
//взятые в прямом порядке следования, y1,...yq - неотрицательные элементы исходного вектора, взятые в обратном порядке следования, s= min{p,q}.
std::vector<double>  MyNewVec(int n, std::vector<double> v);

//Даны строки S, S0 и целое число k. Определить, имеется ли в строке S как минимум k вхождений подстроки S0.
bool HowMuchS0inS(string s, string s0, int k);


#endif test1_h
